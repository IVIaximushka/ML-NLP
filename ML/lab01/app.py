import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller, kpss, acf, pacf
import plotly.subplots as sp
from io import StringIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤",
    page_icon="üìà",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à CSV-—Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", 
        type=['csv'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π –∏ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã"
    )
    
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        date_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π", df.columns)
        target_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é", df.columns)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        try:
            df[date_col] = pd.to_datetime(df[date_col])
            df = df.set_index(date_col)
        except:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    seasonality_period = st.number_input(
        "–ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", 
        min_value=2, 
        value=7,
        help="–ù–∞–ø—Ä–∏–º–µ—Ä: 7 –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π, 30 –¥–ª—è –º–µ—Å—è—á–Ω–æ–π, 365 –¥–ª—è –≥–æ–¥–æ–≤–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"
    )
    
    max_lags = st.number_input(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–≥–æ–≤ –¥–ª—è ACF/PACF",
        min_value=5,
        value=40
    )
    
    window_size = st.number_input(
        "–û–∫–Ω–æ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ",
        min_value=2,
        value=30
    )
    
    decomposition_model = st.radio(
        "–ú–æ–¥–µ–ª—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
        ["additive", "multiplicative"]
    )
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_btn = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if uploaded_file is not None and analyze_btn:
    try:
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫", 
            "üîç –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", 
            "üìà ACF/PACF",
            "üìâ –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å",
            "üìã –û—Ç—á–µ—Ç"
        ])
        
        with tab1:
            st.header("–û—Å–Ω–æ–≤–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
            
            # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∞
            fig_main = go.Figure()
            fig_main.add_trace(go.Scatter(
                x=df.index, 
                y=df[target_col],
                name="–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥",
                line=dict(color='blue')
            ))
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
            rolling_mean = df[target_col].rolling(window=window_size).mean()
            fig_main.add_trace(go.Scatter(
                x=df.index, 
                y=rolling_mean,
                name=f"–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ ({window_size})",
                line=dict(color='red', dash='dash')
            ))
            
            fig_main.update_layout(
                title="–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å–æ —Å–∫–æ–ª—å–∑—è—â–∏–º —Å—Ä–µ–¥–Ω–∏–º",
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title=target_col
            )
            
            st.plotly_chart(fig_main, use_container_width=True)
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{df[target_col].mean():.2f}")
            with col2:
                st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{df[target_col].std():.2f}")
            with col3:
                st.metric("–ú–∏–Ω–∏–º—É–º", f"{df[target_col].min():.2f}")
            with col4:
                st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{df[target_col].max():.2f}")
        
        with tab2:
            st.header("–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
            
            # –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è
            if len(df) >= 2 * seasonality_period:
                decomposition = seasonal_decompose(
                    df[target_col].dropna(),
                    model=decomposition_model,
                    period=seasonality_period
                )
                
                # –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                fig_decomp = sp.make_subplots(
                    rows=4, cols=1,
                    subplot_titles=['–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥', '–¢—Ä–µ–Ω–¥', '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–û—Å—Ç–∞—Ç–∫–∏'],
                    vertical_spacing=0.05
                )
                
                fig_decomp.add_trace(
                    go.Scatter(x=df.index, y=decomposition.observed, name="–ò—Å—Ö–æ–¥–Ω—ã–π"),
                    row=1, col=1
                )
                
                fig_decomp.add_trace(
                    go.Scatter(x=df.index, y=decomposition.trend, name="–¢—Ä–µ–Ω–¥"),
                    row=2, col=1
                )
                
                fig_decomp.add_trace(
                    go.Scatter(x=df.index, y=decomposition.seasonal, name="–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å"),
                    row=3, col=1
                )
                
                fig_decomp.add_trace(
                    go.Scatter(x=df.index, y=decomposition.resid, name="–û—Å—Ç–∞—Ç–∫–∏"),
                    row=4, col=1
                )
                
                fig_decomp.update_layout(height=800, showlegend=False)
                st.plotly_chart(fig_decomp, use_container_width=True)
            else:
                st.warning(f"–î–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º {2 * seasonality_period} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        
        with tab3:
            st.header("–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            
            # ACF –∏ PACF
            series_clean = df[target_col].dropna()
            
            acf_values = acf(series_clean, nlags=max_lags)
            pacf_values = pacf(series_clean, nlags=max_lags)
            
            fig_acf = sp.make_subplots(rows=1, cols=2, subplot_titles=['ACF', 'PACF'])
            
            # ACF plot
            fig_acf.add_trace(
                go.Bar(x=list(range(len(acf_values))), y=acf_values, name="ACF"),
                row=1, col=1
            )
            
            # PACF plot
            fig_acf.add_trace(
                go.Bar(x=list(range(len(pacf_values))), y=pacf_values, name="PACF"),
                row=1, col=2
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            conf_int = 1.96 / np.sqrt(len(series_clean))
            
            fig_acf.add_hline(y=conf_int, line_dash="dash", line_color="red", row=1, col=1)
            fig_acf.add_hline(y=-conf_int, line_dash="dash", line_color="red", row=1, col=1)
            fig_acf.add_hline(y=conf_int, line_dash="dash", line_color="red", row=1, col=2)
            fig_acf.add_hline(y=-conf_int, line_dash="dash", line_color="red", row=1, col=2)
            
            fig_acf.update_layout(showlegend=False, height=400)
            st.plotly_chart(fig_acf, use_container_width=True)
        
        with tab4:
            st.header("–¢–µ—Å—Ç—ã –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å")
            
            # –¢–µ—Å—Ç –î–∏–∫–∏-–§—É–ª–ª–µ—Ä–∞
            adf_result = adfuller(df[target_col].dropna())
            
            # –¢–µ—Å—Ç KPSS
            try:
                kpss_result = kpss(df[target_col].dropna())
            except:
                kpss_result = [None, None, None, None]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–¢–µ—Å—Ç –î–∏–∫–∏-–§—É–ª–ª–µ—Ä–∞ (ADF)")
                st.metric("ADF Statistic", f"{adf_result[0]:.4f}")
                st.metric("p-value", f"{adf_result[1]:.4f}")
                st.metric(
                    "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω", 
                    "–î–∞" if adf_result[1] < 0.05 else "–ù–µ—Ç",
                    delta="–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω" if adf_result[1] < 0.05 else "–ù–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω",
                    delta_color="normal" if adf_result[1] < 0.05 else "inverse"
                )
            
            with col2:
                st.subheader("–¢–µ—Å—Ç KPSS")
                if kpss_result[0] is not None:
                    st.metric("KPSS Statistic", f"{kpss_result[0]:.4f}")
                    st.metric("p-value", f"{kpss_result[1]:.4f}")
                    st.metric(
                        "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω", 
                        "–î–∞" if kpss_result[1] > 0.05 else "–ù–µ—Ç",
                        delta="–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω" if kpss_result[1] > 0.05 else "–ù–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω",
                        delta_color="normal" if kpss_result[1] > 0.05 else "inverse"
                    )
                else:
                    st.error("KPSS —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å")
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            st.info("""
            **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**
            - **ADF:** p-value < 0.05 ‚Üí —Ä—è–¥ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω
            - **KPSS:** p-value > 0.05 ‚Üí —Ä—è–¥ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω
            """)
        
        with tab5:
            st.header("–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = f"""
            # –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
            
            ## –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            - **–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è:** {target_col}
            - **–ü–µ—Ä–∏–æ–¥:** {df.index.min()} - {df.index.max()}
            - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:** {len(df)}
            - **–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:** {df[target_col].isna().sum()}
            
            ## –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
            - **–¢–µ—Å—Ç ADF:** p-value = {adf_result[1]:.4f} ({'—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω' if adf_result[1] < 0.05 else '–Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω'})
            - **–¢–µ—Å—Ç KPSS:** p-value = {kpss_result[1] if kpss_result[1] is not None else 'N/A':.4f} ({'—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω' if kpss_result[1] is not None and kpss_result[1] > 0.05 else '–Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω'})
            
            ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
            - **–ú–æ–¥–µ–ª—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:** {decomposition_model}
            - **–ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏:** {seasonality_period}
            - **–û–∫–Ω–æ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ:** {window_size}
            """
            
            st.markdown(report)
            
            # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
            html_report = f"""
            <html>
            <head>
                <title>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞</title>
                <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            </head>
            <body>
                <h1>–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞</h1>
                {report.replace('\n', '<br>')}
            </body>
            </html>
            """
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å HTML –æ—Ç—á–µ—Ç",
                data=html_report,
                file_name="time_series_report.html",
                mime="text/html"
            )
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
else:
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
    
    # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ü—Ä–∏–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    sample_data = pd.DataFrame({
        'Date': pd.date_range('2023-01-01', periods=100, freq='D'),
        'Sales': np.random.randn(100).cumsum() + 100,
        'Temperature': np.sin(np.linspace(0, 4*np.pi, 100)) * 10 + 20
    })
    st.dataframe(sample_data.head(10))
