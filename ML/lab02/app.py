# app.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(__file__))

from utils.decomposition import perform_decomposition, analyze_residuals
from utils.feature_engineering import main_feature_engineering
from utils.multistep_forecasting import compare_strategies
from utils.cross_validation import main_cross_validation
from utils.stationarity import main_stationarity_transformation
from utils.exponential_smoothing import main_exponential_smoothing

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV/Parquet —Ñ–∞–π–ª", type=['csv', 'parquet'])
    
    if uploaded_file is not None:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_parquet(uploaded_file)
        return df
    return None

def main():
    st.title("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    
    if df is not None:
        st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        target_col = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é", df.columns)
        date_col = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π", df.columns)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        df[date_col] = pd.to_datetime(df[date_col])
        df = df.set_index(date_col)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        h = st.sidebar.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ h", [7, 30, 90], index=0)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
            "üìä –î–∞–Ω–Ω—ã–µ", "üîç –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "‚öôÔ∏è –ü—Ä–∏–∑–Ω–∞–∫–∏", 
            "üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è", "üìâ –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å", "üîÑ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ"
        ])
        
        with tab1:
            st.header("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
            st.write("–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:")
            st.dataframe(df.head(10))
            st.write(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape}")
            st.write("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            st.dataframe(df.describe())
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—è–¥–∞
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=df.index, y=df[target_col], name=target_col))
            fig.update_layout(title=f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {target_col}", xaxis_title="–î–∞—Ç–∞", yaxis_title=target_col)
            st.plotly_chart(fig)
        
        with tab2:
            st.header("–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
            model_type = st.radio("–¢–∏–ø –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏", ["additive", "multiplicative"])
            period = st.selectbox("–ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", [7, 30, 365], index=0)
            
            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é"):
                decomposition = perform_decomposition(df[target_col], period, model_type)
                
                if decomposition:
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    fig = make_subplots(rows=4, cols=1, subplot_titles=['–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥', '–¢—Ä–µ–Ω–¥', '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–û—Å—Ç–∞—Ç–∫–∏'])
                    
                    fig.add_trace(go.Scatter(x=df.index, y=decomposition.observed, name='–ò—Å—Ö–æ–¥–Ω—ã–π'), row=1, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=decomposition.trend, name='–¢—Ä–µ–Ω–¥'), row=2, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=decomposition.seasonal, name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å'), row=3, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=decomposition.resid, name='–û—Å—Ç–∞—Ç–∫–∏'), row=4, col=1)
                    
                    fig.update_layout(height=800, title_text="–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
                    st.plotly_chart(fig)
                    
                    # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    residuals_analysis = analyze_residuals(decomposition.resid, period, model_type)
                    st.write("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤:")
                    st.json(residuals_analysis)
        
        with tab3:
            st.header("Feature Engineering")
            if st.button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏"):
                df_with_features = main_feature_engineering(df, target_col)
                st.write("–î–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏:")
                st.dataframe(df_with_features.head())
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(df_with_features.columns)}")
        
        with tab4:
            st.header("–ú–Ω–æ–≥–æ–ø—à–∞–≥–æ–≤–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
            if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"):
                df_with_features = main_feature_engineering(df, target_col)
                results = compare_strategies(
                    df_with_features.drop(columns=[target_col]),
                    df_with_features[target_col],
                    h
                )
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                fig = go.Figure()
                for strategy, result in results.items():
                    fig.add_trace(go.Scatter(
                        x=list(range(1, h+1)),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ range –≤ list
                        y=result['predictions'],
                        name=strategy,
                        mode='lines+markers'
                    ))
                
                fig.update_layout(title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º", 
                                xaxis_title="–®–∞–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞", 
                                yaxis_title=target_col)
                st.plotly_chart(fig)
                
                # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
                metrics_data = []
                for strategy, result in results.items():
                    metrics_data.append({
                        '–°—Ç—Ä–∞—Ç–µ–≥–∏—è': strategy,
                        'MAE': result['mae'],
                        'RMSE': result['rmse'],
                        '–í—Ä–µ–º—è (—Å–µ–∫)': result['execution_time']
                    })
                
                st.dataframe(pd.DataFrame(metrics_data))
        
        with tab5:
            st.header("–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é"):
                df_with_features = main_feature_engineering(df, target_col)
                cv_results = main_cross_validation(df_with_features, target_col)
                st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
                st.dataframe(cv_results)
        
        with tab6:
            st.header("–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏")
            if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å"):
                transformation_results = main_stationarity_transformation(df, target_col)
                st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π:")
                st.dataframe(transformation_results)
        
        with tab7:
            st.header("–ú–æ–¥–µ–ª–∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è")
            if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è"):
                smoothing_results = main_exponential_smoothing(df, target_col, h)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                fig = go.Figure()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                split_idx = int(len(df) * 0.8)
                train = df[target_col].iloc[:split_idx]
                test = df[target_col].iloc[split_idx:split_idx + h]
                
                fig.add_trace(go.Scatter(x=train.index, y=train.values, name='–û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ'))
                fig.add_trace(go.Scatter(x=test.index, y=test.values, name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è', line=dict(dash='dash')))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                for _, model_result in smoothing_results.iterrows():
                    if model_result['forecast'] is not None:
                        fig.add_trace(go.Scatter(
                            x=test.index,
                            y=model_result['forecast'],
                            name=f"{model_result['model']} –ø—Ä–æ–≥–Ω–æ–∑",
                            mode='lines+markers'
                        ))
                
                fig.update_layout(title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è")
                st.plotly_chart(fig)
                
                # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
                st.write("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π:")
                st.dataframe(smoothing_results[['model', 'mae', 'rmse']])
    
    else:
        st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Parquet —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()