# web_interface.py
import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA
import pandas as pd
from scipy.spatial.distance import cosine

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤", layout="wide")

st.title("üîç –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
@st.cache_resource
def load_selected_models():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    from gensim.models import Word2Vec, FastText, Doc2Vec
    import os
    
    models = {}
    model_files = [f for f in os.listdir('saved_models') if f.endswith('.model')][:3]
    
    for model_file in model_files:
        model_path = os.path.join('saved_models', model_file)
        model_name = model_file.replace('.model', '')
        
        if 'word2vec' in model_name:
            models[model_name] = Word2Vec.load(model_path)
        elif 'fasttext' in model_name:
            models[model_name] = FastText.load(model_path)
        elif 'doc2vec' in model_name:
            models[model_name] = Doc2Vec.load(model_path)
    
    return models

models = load_selected_models()

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
selected_model_name = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
    list(models.keys())
)
model = models[selected_model_name]

# –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4 = st.tabs([
    "üßÆ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞", 
    "üìä –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ", 
    "üìà –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–∏", 
    "üìã –û—Ç—á—ë—Ç"
])

with tab1:
    st.header("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
        expression = st.text_input(
            "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:",
            "–∫–æ—Ä–æ–ª—å - –º—É–∂—á–∏–Ω–∞ + –∂–µ–Ω—â–∏–Ω–∞",
            help="–§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ1 + —Å–ª–æ–≤–æ2 - —Å–ª–æ–≤–æ3 ..."
        )
        
        if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å"):
            try:
                # –ü–∞—Ä—Å–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                tokens = expression.split()
                positive_words = []
                negative_words = []
                current_sign = 1
                
                for token in tokens:
                    if token == '+':
                        current_sign = 1
                    elif token == '-':
                        current_sign = -1
                    else:
                        if current_sign == 1:
                            positive_words.append(token)
                        else:
                            negative_words.append(token)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É
                if hasattr(model, 'wv'):
                    result = model.wv.most_similar(
                        positive=positive_words, 
                        negative=negative_words, 
                        topn=10
                    )
                    
                    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:")
                    result_df = pd.DataFrame(result, columns=['–°–ª–æ–≤–æ', '–°—Ö–æ–¥—Å—Ç–≤–æ'])
                    st.dataframe(result_df, use_container_width=True)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    words_to_visualize = positive_words + negative_words + [word for word, _ in result[:5]]
                    vectors = []
                    labels = []
                    
                    for word in words_to_visualize:
                        if word in model.wv:
                            vectors.append(model.wv[word])
                            labels.append(word)
                    
                    if len(vectors) >= 3:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º PCA –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        pca = PCA(n_components=2)
                        vectors_2d = pca.fit_transform(vectors)
                        
                        fig = go.Figure()
                        
                        # –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞
                        fig.add_trace(go.Scatter(
                            x=vectors_2d[:len(positive_words + negative_words), 0],
                            y=vectors_2d[:len(positive_words + negative_words), 1],
                            mode='markers+text',
                            marker=dict(size=15, color='blue'),
                            text=labels[:len(positive_words + negative_words)],
                            textposition="top center",
                            name="–ò—Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞"
                        ))
                        
                        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        fig.add_trace(go.Scatter(
                            x=vectors_2d[len(positive_words + negative_words):, 0],
                            y=vectors_2d[len(positive_words + negative_words):, 1],
                            mode='markers+text',
                            marker=dict(size=15, color='red'),
                            text=labels[len(positive_words + negative_words):],
                            textposition="top center",
                            name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                        ))
                        
                        fig.update_layout(
                            title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ (PCA)",
                            xaxis_title="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 1",
                            yaxis_title="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 2"
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

with tab2:
    st.header("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º —Å—Ö–æ–¥—Å—Ç–≤–æ–º")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ö–æ–¥—Å—Ç–≤–∞")
        word1 = st.text_input("–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:", "–∫–æ–º–ø—å—é—Ç–µ—Ä")
        word2 = st.text_input("–í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ:", "–Ω–æ—É—Ç–±—É–∫")
        
        if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ö–æ–¥—Å—Ç–≤–æ"):
            if hasattr(model, 'wv'):
                if word1 in model.wv and word2 in model.wv:
                    similarity = 1 - cosine(model.wv[word1], model.wv[word2])
                    st.metric("–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ", f"{similarity:.4f}")
                else:
                    st.warning("–û–¥–Ω–æ –∏–ª–∏ –æ–±–∞ —Å–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –º–æ–¥–µ–ª–∏")
    
    with col2:
        st.subheader("–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Å–µ–¥–∏")
        target_word = st.text_input("–°–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", "–ø—Ä–æ–≥—Ä–∞–º–º–∞")
        n_neighbors = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π:", 5, 20, 10)
        
        if st.button("–ù–∞–π—Ç–∏ —Å–æ—Å–µ–¥–µ–π"):
            if hasattr(model, 'wv') and target_word in model.wv:
                neighbors = model.wv.most_similar(target_word, topn=n_neighbors)
                neighbors_df = pd.DataFrame(neighbors, columns=['–°–ª–æ–≤–æ', '–°—Ö–æ–¥—Å—Ç–≤–æ'])
                st.dataframe(neighbors_df, use_container_width=True)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π
    st.subheader("–ì—Ä–∞—Ñ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π")
    central_word = st.text_input("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≥—Ä–∞—Ñ–∞:", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π")
    graph_depth = st.slider("–ì–ª—É–±–∏–Ω–∞ –≥—Ä–∞—Ñ–∞:", 1, 3, 2)
    
    if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ"):
        if hasattr(model, 'wv') and central_word in model.wv:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –≥—Ä–∞—Ñ–∞
            graph_words = [central_word]
            graph_edges = []
            
            # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–≤—è–∑–µ–π
            level1_neighbors = model.wv.most_similar(central_word, topn=10)
            for neighbor, similarity in level1_neighbors:
                graph_words.append(neighbor)
                graph_edges.append((central_word, neighbor, similarity))
            
            # –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–≤—è–∑–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if graph_depth >= 2:
                for neighbor, _ in level1_neighbors[:5]:
                    if neighbor in model.wv:
                        level2_neighbors = model.wv.most_similar(neighbor, topn=5)
                        for neighbor2, similarity2 in level2_neighbors:
                            if neighbor2 not in graph_words:
                                graph_words.append(neighbor2)
                            graph_edges.append((neighbor, neighbor2, similarity2))
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∞
            edge_x = []
            edge_y = []
            edge_text = []
            
            node_x = []
            node_y = []
            node_text = []
            
            # –ü—Ä–æ—Å—Ç–∞—è –∫—Ä—É–≥–æ–≤–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
            n_nodes = len(graph_words)
            angles = np.linspace(0, 2*np.pi, n_nodes, endpoint=False)
            
            for i, word in enumerate(graph_words):
                node_x.append(np.cos(angles[i]))
                node_y.append(np.sin(angles[i]))
                node_text.append(word)
            
            for edge in graph_edges:
                source_idx = graph_words.index(edge[0])
                target_idx = graph_words.index(edge[1])
                
                edge_x.extend([node_x[source_idx], node_x[target_idx], None])
                edge_y.extend([node_y[source_idx], node_y[target_idx], None])
                edge_text.append(f"{edge[2]:.3f}")
            
            fig = go.Figure()
            
            # –†—ë–±—Ä–∞
            fig.add_trace(go.Scatter(
                x=edge_x, y=edge_y,
                line=dict(width=1, color='gray'),
                hoverinfo='none',
                mode='lines',
                showlegend=False
            ))
            
            # –£–∑–ª—ã
            fig.add_trace(go.Scatter(
                x=node_x, y=node_y,
                mode='markers+text',
                marker=dict(size=20, color='lightblue'),
                text=node_text,
                textposition="middle center",
                hoverinfo='text',
                showlegend=False
            ))
            
            fig.update_layout(
                title="–ì—Ä–∞—Ñ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π",
                showlegend=False,
                hovermode='closest',
                margin=dict(b=20,l=5,r=5,t=40),
                annotations=[ dict(
                    text="",
                    showarrow=False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)
            )
            
            st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–µ–π")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–∏")
        axis_word1 = st.text_input("–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –æ—Å–∏:", "–º—É–∂—á–∏–Ω–∞")
        axis_word2 = st.text_input("–í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ –æ—Å–∏:", "–∂–µ–Ω—â–∏–Ω–∞")
        
        if st.button("–°–æ–∑–¥–∞—Ç—å –æ—Å—å"):
            if (hasattr(model, 'wv') and 
                axis_word1 in model.wv and 
                axis_word2 in model.wv):
                
                axis_vector = model.wv[axis_word1] - model.wv[axis_word2]
                st.session_state.axis_vector = axis_vector
                st.session_state.axis_name = f"{axis_word1}-{axis_word2}"
                st.success(f"–û—Å—å '{axis_word1}-{axis_word2}' —Å–æ–∑–¥–∞–Ω–∞!")
    
    with col2:
        st.subheader("–ü—Ä–æ–µ–∫—Ü–∏—è —Å–ª–æ–≤ –Ω–∞ –æ—Å—å")
        if 'axis_vector' in st.session_state:
            test_words = st.text_area(
                "–°–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
                "–∫–æ—Ä–æ–ª—å, –∫–æ—Ä–æ–ª–µ–≤–∞, –ø—Ä–∏–Ω—Ü, –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞, –≤—Ä–∞—á, —É—á–∏—Ç–µ–ª—å, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
            )
            
            if st.button("–°–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å"):
                words_list = [w.strip() for w in test_words.split(',')]
                projections = {}
                
                for word in words_list:
                    if word in model.wv:
                        projection = np.dot(model.wv[word], st.session_state.axis_vector)
                        projections[word] = projection
                
                if projections:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ü–∏–∏
                    sorted_projections = dict(sorted(projections.items(), key=lambda x: x[1]))
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                    fig = go.Figure()
                    
                    words = list(sorted_projections.keys())
                    values = list(sorted_projections.values())
                    
                    fig.add_trace(go.Scatter(
                        x=values,
                        y=words,
                        mode='markers',
                        marker=dict(size=15, color=values, colorscale='RdYlBu_r'),
                        hovertemplate='<b>%{y}</b><br>–ü—Ä–æ–µ–∫—Ü–∏—è: %{x:.3f}<extra></extra>'
                    ))
                    
                    fig.update_layout(
                        title=f"–ü—Ä–æ–µ–∫—Ü–∏—è —Å–ª–æ–≤ –Ω–∞ –æ—Å—å '{st.session_state.axis_name}'",
                        xaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ü–∏–∏",
                        yaxis_title="–°–ª–æ–≤–∞",
                        height=500
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç")
    
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"):
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if hasattr(model, 'wv'):
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
            st.subheader("üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è", len(model.wv.key_to_index))
            with col2:
                st.metric("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤", model.vector_size)
            with col3:
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏–π
                st.metric("–ú–æ–¥–µ–ª—å", selected_model_name)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ö–æ–¥—Å—Ç–≤
            st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ö–æ–¥—Å—Ç–≤")
            
            # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É —Å–ª–æ–≤
            sample_words = list(model.wv.key_to_index.keys())[:1000]
            similarities = []
            
            for i in range(len(sample_words)):
                for j in range(i+1, min(i+10, len(sample_words))):
                    if (sample_words[i] in model.wv and 
                        sample_words[j] in model.wv):
                        sim = 1 - cosine(model.wv[sample_words[i]], model.wv[sample_words[j]])
                        similarities.append(sim)
            
            if similarities:
                fig = px.histogram(
                    x=similarities, 
                    nbins=50,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω—ã—Ö —Å—Ö–æ–¥—Å—Ç–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏"
                )
                fig.update_layout(xaxis_title="–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ", yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞")
                st.plotly_chart(fig, use_container_width=True)
            
            # Heatmap —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–∏–∑–æ—Å—Ç–µ–π
            st.subheader("üî• Heatmap —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–∏–∑–æ—Å—Ç–µ–π")
            
            common_words = ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–¥–∞–Ω–Ω—ã–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Å–∏—Å—Ç–µ–º–∞', '—Å–µ—Ç—å']
            available_words = [w for w in common_words if w in model.wv]
            
            if len(available_words) >= 3:
                vectors = [model.wv[word] for word in available_words]
                similarity_matrix = np.zeros((len(available_words), len(available_words)))
                
                for i in range(len(available_words)):
                    for j in range(len(available_words)):
                        similarity_matrix[i,j] = 1 - cosine(vectors[i], vectors[j])
                
                fig = px.imshow(
                    similarity_matrix,
                    x=available_words,
                    y=available_words,
                    color_continuous_scale='viridis',
                    title="–ú–∞—Ç—Ä–∏—Ü–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–∏–∑–æ—Å—Ç–µ–π"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # 2D –ø—Ä–æ–µ–∫—Ü–∏—è —Å–ª–æ–≤
            st.subheader("üéØ 2D –ø—Ä–æ–µ–∫—Ü–∏—è —Å–ª–æ–≤")
            
            projection_words = st.text_input(
                "–°–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
                "–∫–æ–º–ø—å—é—Ç–µ—Ä, –ø—Ä–æ–≥—Ä–∞–º–º–∞, –¥–∞–Ω–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–∏—Å—Ç–µ–º–∞, —á–µ–ª–æ–≤–µ–∫, —Ä–∞–±–æ—Ç–∞, –≤—Ä–µ–º—è, –≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞"
            )
            
            words_list = [w.strip() for w in projection_words.split(',')]
            available_words = [w for w in words_list if w in model.wv]
            
            if len(available_words) >= 3:
                vectors = [model.wv[word] for word in available_words]
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º t-SNE
                tsne = TSNE(n_components=2, random_state=42)
                vectors_2d = tsne.fit_transform(vectors)
                
                fig = px.scatter(
                    x=vectors_2d[:, 0],
                    y=vectors_2d[:, 1],
                    text=available_words,
                    title="t-SNE –ø—Ä–æ–µ–∫—Ü–∏—è —Å–ª–æ–≤"
                )
                
                fig.update_traces(
                    marker=dict(size=12),
                    textposition='top center'
                )
                
                fig.update_layout(
                    xaxis_title="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 1",
                    yaxis_title="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 2"
                )
                
                st.plotly_chart(fig, use_container_width=True)

st.sidebar.markdown("---")
st.sidebar.info(
    "üí° **–°–æ–≤–µ—Ç—ã:**\n"
    "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–æ–≥–∏–π\n"
    "- –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—â–µ–Ω–∏–π\n"
    "- –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ—ã"
)